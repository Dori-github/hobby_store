<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper   
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"   
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.spring.course.dao.CourseMapper">
	<!-- sql 태그와 include 태그를 이용해 SQL문 재사용 -->
	
	<!-- ====================카테고리====================== -->
	<sql id="courseCate">
		<if test="cate!=null and cate!=''">
			<if test="cate_num!=0"> <!-- 전체가 아닐 때 -->
				<if test="cate_num lte 6">
				AND cate_nums LIKE #{cate_num} || '%'
			</if>
			 	<if test="cate_num gte 7">
				AND cate_nums LIKE '%' || #{cate_num}
			</if>
			
			</if>
		</if>
	</sql>
	
	<!-- ====================온라인,오프라인====================== -->
	<sql id="courseOnoff">
			<if test="onoff!=null and onoff!=''">
				<if test="onoff==1"> <!-- 오프라인 -->
					AND course_onoff='off'
				</if>
				<if test="onoff==2"> <!-- 온라인 -->
					AND course_onoff='on'
				</if>
			</if>
	</sql>
	
	<!-- ====================원데이,정기====================== -->
	<sql id="courseOneweek">
		<if test="oneweek!=null and oneweek!=''">
			<if test="oneweek==1"><!-- 원데이 -->
				AND course_oneweek='one'
			</if>
			<if test="oneweek==2"><!-- 정기 -->
				AND course_oneweek='week'
			</if>
		</if>
	</sql>
	
	<!-- ====================키필드,키워드====================== -->
	<sql id="courseSearch">
		<if test="keyword!=null and keyword!=''">
				<if test="keyfield==1">
					AND course_name LIKE '%' || #{keyword} || '%' OR course_content LIKE '%' || #{keyword} || '%' OR mem_nickname LIKE '%' || #{keyword} || '%'
				</if>
				<if test="keyfield==2">
					AND course_name LIKE '%' || #{keyword} || '%'
				</if>
				<if test="keyfield==3">
					AND course_content LIKE '%' || #{keyword} || '%'
				</if>
				<if test="keyfield==4">
					AND mem_nickname LIKE '%' || #{keyword} || '%'
				</if>
			</if>
	</sql>
	
	<!-- ====================지역====================== -->
	<sql id="courseLoc">
      <if test="location!=null and location!=''">
         <if test="!'전체'.equals(location)">
            AND course_address1 LIKE #{location} || '%'
         </if>
      </if>
      
   </sql>
	
	<!-- ====================정렬====================== -->
	<sql id="courseOrder">
		<if test="order==1">
			course_num DESC
		</if>
		<if test="order==2">
			replycount DESC NULLS LAST
		</if>
		<if test="order==3">
			fav DESC NULLS LAST
		</if>
		<if test="order==4">
			course_price ASC
		</if>
	</sql>
	
	
	<select id="selectCourseCount" parameterType="map" resultType="integer">
		SELECT COUNT(*) FROM course JOIN member USING(mem_num) 
		LEFT JOIN (SELECT course_num , COUNT(reply_num) AS replycount 
		FROM course_reply GROUP BY course_num) USING(course_num)
		LEFT JOIN (SELECT course_num,COUNT(fav_num) AS fav 
		FROM course_fav GROUP BY course_num) USING(course_num)
		LEFT JOIN (SELECT course_num , ROUND(AVG(star_auth),1) AS staravg 
		FROM course_reply GROUP BY course_num) USING(course_num)
		WHERE status = #{status}
			<include refid="courseCate"></include>
			<include refid="courseOnoff"></include>
			<include refid="courseOneweek"></include>
			<include refid="courseSearch"></include>
			<include refid="courseLoc"></include>
		ORDER BY <include refid="courseOrder"></include>
	</select>
	 
	<select id="selectCourseList" parameterType="map" resultType="courseVO">
		SELECT * FROM 
		(SELECT a.*,rownum rnum FROM 
		(SELECT * 
		FROM course c JOIN member m USING(mem_num) 
		LEFT JOIN (SELECT course_num , COUNT(reply_num) AS replycount 
		FROM course_reply GROUP BY course_num) USING(course_num)
		LEFT JOIN (SELECT course_num,COUNT(fav_num) AS fav 
		FROM course_fav GROUP BY course_num) USING(course_num)
		LEFT JOIN (SELECT course_num , ROUND(AVG(star_auth),1) AS staravg 
		FROM course_reply GROUP BY course_num) USING(course_num)
		WHERE status = #{status}
			<include refid="courseCate"></include>
			<include refid="courseOnoff"></include>
			<include refid="courseOneweek"></include>
			<include refid="courseSearch"></include>
			<include refid="courseLoc"></include>
			ORDER BY <include refid="courseOrder"></include>)a)
			<![CDATA[
			WHERE rnum>=#{start} AND rnum<=#{end}
			]]>
	</select>
	
	
	
	<!-- 클래스 수정 -->
	<update id="updateCourse" parameterType="courseVO">
  		UPDATE course SET
  		  <if test="course_photo_name1 !=''">
  		  	course_photo1=#{course_photo1},
  		  	course_photo_name1=#{course_photo_name1},
  		  </if>  		
  		  <if test="course_photo_name2 !=''">
  		  	course_photo2=#{course_photo2},
  		  	course_photo_name2=#{course_photo_name2},
  		  </if>
  		  <if test="course_photo_name3 !=''">
  		  	course_photo3=#{course_photo3},
  		  	course_photo_name3=#{course_photo_name3},
  		  </if>
  		  course_name=#{course_name},
  		  status=#{status},
  		  course_onoff=#{course_onoff},
  		  course_oneweek=#{course_oneweek, jdbcType=VARCHAR},
  		  cate_nums=#{cate_nums},
  		  course_zipcode=#{course_zipcode},
  		  course_address1=#{course_address1},
  		  course_address2=#{course_address2},
  		  course_startdate=#{course_startdate},
  		  course_month=#{course_month},
  		  course_count=#{course_count},
  		  course_limit=#{course_limit},
  		  course_price=#{course_price},
  		  course_content=#{course_content},
  		  course_mdate=SYSDATE

  		WHERE course_num=#{course_num}    
  	</update>
	


	
	
	<!-- 후기 목록 -->
	<sql id="replyOrder">
		<if test="order==1"><!-- 최신순 -->
			reply_num DESC
		</if>
		<if test="order==2"><!-- 별점순 -->
			star_auth DESC,reply_num DESC
		</if>
		<if test="order==3"><!-- 좋아요순 -->
			fav_cnt DESC NULLS LAST,reply_num DESC
		</if>
	</sql>

	<select id="selectReplyCount" parameterType="map" resultType="integer">
		SELECT COUNT(*) FROM course_reply JOIN member USING(mem_num) JOIN member_detail USING(mem_num) WHERE course_num=#{course_num} 
	</select>
	
  	<select id="selectListReply" parameterType="map" resultType="courseReplyVO">
  		SELECT
          *
        FROM (SELECT 
               m.*, 
               rownum rnum 
             FROM (SELECT 
                     *
                    FROM (SELECT 
                            *
                          FROM course_reply where course_num = #{course_num}) r 
                               JOIN member m USING(mem_num)
                               JOIN member_detail d USING(mem_num)
                               LEFT OUTER JOIN 
                               <if test="mem_num!=null">
                               (SELECT *  FROM (SELECT reply_num, COUNT(reply_num) AS fav_cnt
                                                FROM course_reply_fav group by reply_num)a 
                                                     LEFT OUTER JOIN 
                                                     (SELECT * FROM course_reply_fav WHERE fmem_num=#{mem_num})b 
                                                     USING(reply_num))f 
                               </if>
                               <if test="mem_num==null">
                               (SELECT reply_num, COUNT(reply_num) AS fav_cnt 
                               FROM course_reply_fav group by reply_num)f
                               </if>                       
                               USING(reply_num) 
                               ORDER BY <include refid="replyOrder"></include>)m) 
  		    <![CDATA[
  		    WHERE rnum >= #{start} AND rnum <= #{end}
  		    ]]>          
  	</select>
	
	
	<!-- 후기 수정 -->
	<update id="updateReply" parameterType="courseReplyVO">
  		UPDATE course_reply SET
  		  <if test="reply_photo_name1 !=''">
  		  	reply_photo1=#{reply_photo1},
  		  	reply_photo_name1=#{reply_photo_name1},
  		  </if>  		
  		  <if test="reply_photo_name2 !=''">
  		  	reply_photo2=#{reply_photo2},
  		  	reply_photo_name2=#{reply_photo_name2},
  		  </if>
  		  <if test="reply_photo_name3 !=''">
  		  	reply_photo3=#{reply_photo3},
  		  	reply_photo_name3=#{reply_photo_name3},
  		  </if>
  		  reply_content=#{reply_content},
  		  reply_mdate=SYSDATE

  		WHERE reply_num=#{reply_num}    
  	</update>
	
</mapper> 